import random
from datetime import datetime, timedelta

from flask.cli import with_appcontext
from application import db
from application.command import bp
from application.models import User, CardProduct, OrderProduct, Order


@bp.cli.command('create_db')
@with_appcontext
def create_db():
    db.drop_all()
    db.create_all()
    print('create db')
    print('***Complete***')


@bp.cli.command('add_users')
def add_users():
    add_users_base()


@bp.cli.command('add_cards')
def add_cards():
    add_cards_base()


@bp.cli.command('add_orders')
def add_orders():
    add_orders_base()


@bp.cli.command('add_for_test_users')
def add_for_test_users():
    add_for_test_users_base()


@bp.cli.command('add_for_test_cards')
def add_for_test_cards():
    add_cards_base()


@bp.cli.command('add_for_test_orders')
def add_for_test_orders():
    add_for_test_orders_base()


emails = ['adcde@mail.ru', 'restaurant@mail.ru', 'user@mail.ru', 'denchik123@mail.ru',
          'mishua_keto@mail.ru', 'kama_karsh@mail.ru', 'zaxar_sex@mail.ru', 'nekit_kach@mail.ru']


def add_users_base():
    roles = ['main_admin', 'restaurant', 'user', 'user', 'user', 'user', 'user', 'user']
    users = []
    for i in range(len(emails)):
        address = random.choices(['Белгородская область, город Воскресенск, ул. Славы, 07',
                                  'Ярославская область, город Дорохово, проезд Гагарина, 76',
                                  'Московская область, город Одинцово, спуск Гоголя, 98',
                                  'Ленинградская область, город Орехово-Зуево, бульвар Бухарестская, 48',
                                  'Челябинская область, город Кетозник, наб. Котлетова, 26',
                                  'Омская область, город Щекино, пр. Каршеринга, 16',
                                  'Смоленская область, город Дорохово, въезд Домодедовская, 60',
                                  'Кировская область, город Ногинск, пл. Ладыгина, 33'],
                                 weights=(1, 1, 1, 1, 1, 1, 1, 1), k=1)

        user = User(email=emails[i], address=address, role=roles[i])
        users.append(user)
    db.session.add_all(users)
    db.session.flush()
    db.session.commit()
    print('add_users')
    print('***Complete***')


def add_cards_base():
    names = ['блины с мясом', 'булочка с вишней', 'булочка с изюмом',
             'булочка с клубникой', 'булочка с яблоком', 'бутер', 'пирожок с мясом',
             'самса', 'сырник', 'шаурма']
    texts = [
        'Рис, гречка два отличных источника углеводов. Именно их при диете можно употреблять в небольших порциях. сли уж без кофе совсем никак, тогда лучше пить его уже после еды, и с добавлением молока. Для правильного перекуса прекрасно подойдет яблоко, стакан кефира или горсть орехов. Правильный завтрак спортсмена или человека с высокой физической активностью, отличается от завтрака обычного человека. Здоровое питание укрепляет иммунитет, особенно если совмещать его с занятиями спортом и прогулками на свежем воздухе.',
        'Соблюдение определённых ограничений в рационе вовсе не означает, что вы должны исключить из ежедневного меню все ваши любимые продукты и отдать предпочтение невкусной, но полезной пище. Вкусная и полезная пища необходима для здоровья и работоспособности человека. Специалисты говорят, что ежедневная зарядка, много воды и полезной пищи сделают и из обезьяны человека. Некоторая спорная пища становится полезной, когда её употребляют несколько поколений предков.',
        'Здоровый праздничный ужин вовсе не обязательно должен состоять из шпината, гречки и вареной куриной грудки. Самыми лучшими способами приготовления еды являются следующие: варка на пару, запекание или варка в воде. Помимо стандартных мандаринов и ананасов, отличным украшением любого стола станут необычные, экзотические фрукты. Здоровой может быть даже выпечка, если она приготовлена на пару.',
        'Рис, гречка два отличных источника углеводов. Именно их при диете можно употреблять в небольших порциях. сли уж без кофе совсем никак, тогда лучше пить его уже после еды, и с добавлением молока. Для правильного перекуса прекрасно подойдет яблоко, стакан кефира или горсть орехов. Правильный завтрак спортсмена или человека с высокой физической активностью, отличается от завтрака обычного человека. Здоровое питание укрепляет иммунитет, особенно если совмещать его с занятиями спортом и прогулками на свежем воздухе.',
        'С целью снизить число людей с ожирением рестораны быстрого питания и сети супермаркетов вводят новые, более полезные опции (например, салаты, сэндвичи с цельнозерновым хлебом или напитки без сахара), а также предоставляют информацию о пищевой ценности продуктов в меню или на упаковке. Вторично разогретая пища, особенно если после её приготовления прошло уже несколько часов, практически не содержит ни витаминов, ни других полезных веществ. На поведение потребителей могут повлиять не только вкусовые предпочтения, но и немедленные желания получить определенную еду.',
        'Являясь одной из самых распространённых в мире сельскохозяйственных культур, рис занимает главенствующую позицию в национальной кухне сотен народов. В России до XIX века рис называли «сарацинское зерно». Более половины населения Земли питаются в основном именно рисом, что делает эту сельскохозяйственную культуру важнейшей на планете. В некоторых странах Азии из этого растения готовят такие напитки, как вино и пиво. Из рисовых зерён делают так называемую съедобную рисовую бумагу, применяемую в кондитерском деле.',
        'В европейских странах вопрос о здоровом питании был поднят давно, и в немецкой, французской, итальянской, греческой кухнях представлено большое количество блюд, которые смело можно отнести к полезной пище. У каждого, кто любит возиться на кухне, есть масса маленьких секретов, которые доводят простые блюда до совершенства. Учеными было потрачено много лет, чтобы установить, какие продукты и когда нужно есть, чтобы всегда быть стройным и здоровыми. Прежде всего стоит сказать, что люди часто путают диетическую и обезжиренную пищу с полезной.',
        'Практически все из нас знают, что есть полезная и вредная еда, мы делим все продукты на плохие и хорошие, и это действительно так, потому что не все они полезны для человеческого организма, и есть много таких, которые вредны, а иногда и опасны. Ни для кого не будет открытием, что овощи и фрукты принесут организму колоссальную пользу, так как являются вкусной и полезной едой, насыщенной витаминами и массой других полезных веществ. Покушать утром особо полезно тем, что этот прием пищи заряжает энергией на целый день, и запускает процесс метаболизма в организме. Голодный человек думает не о работе, а о том, что хочет покушать.',
        'Жизнь в большом городе зачастую накладывает на людей очень много обязательств, которые многим мешают планировать свое время. Поэтому времени катастрофически не хватает на все, в том числе и на нормальную здоровую пищу. Полезные продукты необходимо включать в рацион каждый день: они богаты аминокислотами, витаминами, микро- и макроэлементами, жирными кислотами, клетчаткой. На самом деле мы боремся не за вкус еды, а со своей ленью, потому что нам очень удобно купить полуфабрикаты или готовые продукты, чтобы быстрее приготовить.',
        'Ценность яблок кроется в их составе. Почти 80% яблок составляет вода. Остальная часть приходится на клетчатку, органические кислоты, углеводы. Именно зеленое яблоко рекомендуют употреблять во время диет. Среди фруктов яблоко является очень распространенным продуктом и практически целый год присутствует в нашем рационе питания. Употребление этих плодов натощак недопустимо при гастритах с повышенной кислотностью, язвенных болезнях, желчекаменной болезни.']
    prices = [100, 200, 150, 120, 300, 140, 120, 180, 100, 70]

    # photo already in static
    images = ['блины с мясом.jpeg', 'булочка с вишней.jpeg',
              'булочка с изюмом.jpeg', 'булочка с клубникой.jpeg',
              'булочка с яблоком.jpeg', 'бутер.jpeg',
              'пирожок с мясом.jpeg', 'самса.jpeg',
              'сырник.jpeg', 'шаурма.jpeg']

    cards = []
    for i in range(len(names)):
        card = CardProduct(name=names[i], text=texts[i], price=prices[i], image=images[i])
        cards.append(card)
    db.session.add_all(cards)
    db.session.flush()
    db.session.commit()
    print('add_cards')
    print('***Complete***')


def add_orders_base():
    baskets = []
    user_id = [3, 4, 5, 6, 7]
    for i in range(len(user_id)):
        basket = Order(user_id=user_id[i], status='basket')
        baskets.append(basket)
    db.session.add_all(baskets)
    db.session.commit()

    for i in range(1, 40):
        user_id = random.randrange(3, 8)
        texts = random.choices([
            'Внезапно, ключевые особенности структуры проекта представляют собой не что иное, как квинтэссенцию победы маркетинга над разумом и должны быть разоблачены.',
            'Внезапно, некоторые особенности внутренней политики призывают нас к новым свершениям, которые, в свою очередь, должны быть рассмотрены исключительно в разрезе маркетинговых и финансовых предпосылок.',
            'Сложно сказать, почему независимые государства будут в равной степени предоставлены сами себе.',
            ''], weights=[1, 1, 1, 10], k=1)
        address = random.choices(['Белгородская область, город Воскресенск, ул. Славы, 07',
                                  'Ярославская область, город Дорохово, проезд Гагарина, 76',
                                  'Московская область, город Одинцово, спуск Гоголя, 98',
                                  'Ленинградская область, город Орехово-Зуево, бульвар Беляша, 48',
                                  'Челябинская область, город Кетозник, наб. Котлетова, 26',
                                  'Омская область, город Щекино, пр. Каршеринга, 16',
                                  'Смоленская область, город Дорохово, въезд Домодедовская, 60',
                                  'Кировская область, город Винница, пл. Величайшего, 33'],
                                 weights=(1, 1, 1, 1, 1, 1, 1, 1), k=1)

        date = datetime.now()
        status_paid = random.choices(['paid', 'success'], weights=[1, 3], k=1)
        basket = Order(user_id=user_id, text=texts, address=address,
                       date=date - timedelta(minutes=random.randrange(10, 3000)),
                       status=status_paid[0])
        baskets.append(basket)
    db.session.add_all(baskets)
    db.session.commit()

    order_products = []
    card_ids = {0: [1, 4], 1: [4, 8], 2: [8, 11]}
    for i in range(3):
        next_id = card_ids[i]
        for j in range(1, 40):
            card_id = random.randrange(next_id[0], next_id[1])
            amount = random.randrange(1, 7)
            prices = random.randrange(50, 250, 20)
            amount_1 = amount
            price_1 = prices * amount_1
            order_product = OrderProduct(order_id=j, card_id=card_id, amount=amount_1,
                                         price=price_1)

            order_products.append(order_product)

        db.session.add_all(order_products)
        db.session.commit()

    print('add_orders')
    print('***Complete***')


def add_for_test_users_base():
    emails = ['denchik123@mail.ru',
              'mishua_keto@mail.ru', 'kama_karsh@mail.ru', 'zaxar_sex@mail.ru', 'nekit_kach@mail.ru']

    roles = ['user', 'user', 'user', 'user', 'user', 'user']
    users = []
    address = ['Белгородская область, город Воскресенск, ул. Славы, 07',
               'Ярославская область, город Дорохово, проезд Гагарина, 76',
               'Московская область, город Одинцово, спуск Гоголя, 98',
               'Ленинградская область, город Орехово-Зуево, бульвар Бухарестская, 48',
               'Челябинская область, город Кетозник, наб. Котлетова, 26',
               'Омская область, город Щекино, пр. Каршеринга, 16']

    for i in range(len(emails)):
        user = User(email=emails[i], address=address[i], role=roles[i])
        users.append(user)
    db.session.add_all(users)
    db.session.flush()
    db.session.commit()
    print('add_test_users')
    print('***Complete***')


def add_for_test_orders_base():
    user_id = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
    texts = ['Сложно сказать, почему независимые государства будут в равной степени предоставлены сами себе.',
             '', '', '', '', '', '', '', '', '']
    address = ['Белгородская область, город Воскресенск, ул. Славы, 07',
               'Ярославская область, город Дорохово, проезд Гагарина, 76',
               'Московская область, город Одинцово, спуск Гоголя, 98',
               'Ленинградская область, город Орехово-Зуево, бульвар Бухарестская, 48',
               'Челябинская область, город Кетозник, наб. Котлетова, 26',
               'Омская область, город Щекино, пр. Каршеринга, 16',
               '', '', '', '', '']
    status_paid = ['paid', 'success', 'basket', 'paid', 'success', 'paid', 'success', 'basket', 'paid', 'success']

    baskets = []
    for i in range(len(user_id)):
        basket = Order(user_id=user_id[i], text=texts[i], address=address[i],
                       date=datetime.now(),
                       status=status_paid[i])
        baskets.append(basket)
    db.session.add_all(baskets)
    db.session.commit()

    order_id = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    card_id = [1, 2, 3, 4, 5, 6, 7, 1, 2, 3]
    amount = [1, 3, 2, 4, 5, 6, 1, 3, 1, 1]
    prices = [100, 120, 130, 140, 100, 120, 130, 140, 100, 100]
    order_products = []
    for j in range(3):
        for i in range(len(order_id)):
            order_product = OrderProduct(order_id=order_id[i], card_id=card_id[i], amount=amount[i],
                                         price=prices[i])
            order_products.append(order_product)

            db.session.add_all(order_products)
            db.session.commit()

    print('add_test_orders')
    print('***Complete***')
